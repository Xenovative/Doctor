"""
Comprehensive AI Analysis Unit Test Suite
Tests medical reference relevance and CHP guideline mapping accuracy

MODES:
- AUTO: python test_ai_analysis.py (auto-detects server availability)
- MOCK: python test_ai_analysis.py mock (server not required, uses simulated data)
- REAL: python test_ai_analysis.py real (requires running Flask server)

MOCK MODE:
- Uses simulated AI analysis responses
- Tests symptom extraction and relevance scoring logic
- No server required, runs instantly
- Perfect for development and debugging

REAL MODE:
- Makes actual API calls to running Flask server
- Tests complete end-to-end functionality
- Requires server to be running on localhost:7001
- Provides real AI analysis and evidence gathering
"""

import json
import requests
import time
from datetime import datetime
import sys
import os

class AIAnalysisTester:
    def __init__(self, mock_mode=False):
        """Initialize the tester"""
        self.mock_mode = mock_mode
        self.base_url = "http://localhost:7001"
        self.chp_content = []
        self.medical_search_config = self.load_medical_search_config()
        
        # Set default configuration if not available
        if not self.medical_search_config:
            self.medical_search_config = {
                'primary_search_api': 'pubmed',
                'secondary_search_api': 'none',
                'articles_per_symptom': 2,
                'max_symptoms_processed': 4,
                'max_total_articles': 8,
                'search_timeout': 10,
                'pubmed_retmax': 3,
                'enable_cochrane': False,
                'enable_google_scholar': False,
                'search_filters': 'clinical,diagnosis,treatment',
                'relevance_threshold': 0.5,
                'cache_duration': 3600
            }

    def load_medical_search_config(self):
        """Load medical search configuration from admin panel"""
        try:
            # Try to fetch configuration from admin panel
            response = requests.get(f"{self.base_url}/admin/api/medical-search-config", timeout=5)

            if response.status_code == 200:
                # Check if response is HTML (login page) instead of JSON
                content_type = response.headers.get('content-type', '').lower()
                if 'text/html' in content_type or response.text.strip().startswith('<!DOCTYPE html'):
                    print("‚ö†Ô∏è Admin panel requires authentication - login page returned")
                    print("   This is expected when server is running but no admin session exists")
                else:
                    try:
                        data = response.json()
                        if data.get("success", False):
                            print("‚úÖ Loaded medical search configuration from admin panel")
                            return data.get("config", {})
                        else:
                            print(f"‚ö†Ô∏è Admin panel returned success=false: {data.get('error', 'Unknown error')}")
                    except json.JSONDecodeError as json_error:
                        print(f"‚ö†Ô∏è Admin panel returned invalid JSON: {json_error}")
                        print(f"   Response content: {response.text[:200]}...")
            else:
                print(f"‚ö†Ô∏è Admin panel returned HTTP {response.status_code}")
                if response.status_code == 401:
                    print("   Authentication required - admin login needed")
                elif response.status_code == 403:
                    print("   Access forbidden - insufficient admin privileges")
                elif response.status_code == 404:
                    print("   Medical search config endpoint not found - admin panel may not be updated")
                else:
                    print(f"   Response: {response.text[:200]}...")

        except requests.exceptions.ConnectionError:
            print("‚ö†Ô∏è Could not connect to admin panel - server may not be running")
        except requests.exceptions.Timeout:
            print("‚ö†Ô∏è Admin panel request timed out")
        except Exception as e:
            print(f"‚ö†Ô∏è Unexpected error loading medical search config: {e}")

        print("üìã Using default medical search configuration")
        return None

    def load_chp_content(self):
        """Load CHP content database for reference"""
        try:
            with open('assets/content.json', 'r', encoding='utf-8') as f:
                self.chp_content = json.load(f)
                print(f"‚úÖ Loaded {len(self.chp_content)} CHP entries")
        except Exception as e:
            print(f"‚ùå Failed to load CHP content: {e}")
            return False
        return True

    def test_ai_analysis(self, symptoms, expected_chp_topics=None, test_name=""):
        """Test single AI analysis with symptom set"""
        print(f"\nüß™ Testing: {test_name}")
        print(f"   Symptoms: {symptoms}")

        try:
            # Make request to the correct AI analysis endpoint
            # Based on the frontend code, it uses /find_doctor endpoint
            form_data = {
                "age": 30,
                "gender": "Áî∑",
                "symptoms": symptoms,
                "language": "zh-TW",
                "location": "È¶ôÊ∏ØÂ≥∂",
                "chronicConditions": "",
                "locationDetails": {
                    "region": "È¶ôÊ∏ØÂ≥∂",
                    "district": "‰∏≠Ë•øÂçÄ",
                    "area": "‰∏≠Áí∞"
                },
                "detailedHealthInfo": {
                    "height": "",
                    "weight": "",
                    "medications": "",
                    "allergies": "",
                    "surgeries": "",
                    "bloodThinner": False,
                    "recentVisit": False,
                    "cpapMachine": False,
                    "looseTeeth": False
                },
                "uiLanguage": "zh-TW"
            }

            response = requests.post(
                f"{self.base_url}/find_doctor",
                json=form_data,
                timeout=60  # Increased timeout for AI processing
            )

            if response.status_code != 200:
                return {
                    "test_name": test_name,
                    "symptoms": symptoms,
                    "status": "FAILED",
                    "error": f"HTTP {response.status_code}",
                    "response": None
                }

            result = response.json()

            # Check if we have analysis data
            if 'analysis' not in result:
                return {
                    "test_name": test_name,
                    "symptoms": symptoms,
                    "status": "FAILED",
                    "error": "No analysis data in response",
                    "response": result
                }

            analysis = result.get('analysis', '')

            # Debug: Show what we got from the API
            print(f"   üîç API Response Keys: {list(result.keys())}")
            print(f"   üìù Analysis Length: {len(analysis)} characters")
            if len(analysis) > 0:
                print(f"   üìÑ Analysis Preview: {analysis[:100]}...")
            else:
                print("   ‚ùå Analysis is empty!")

            # Extract symptoms from analysis for CHP mapping
            extracted_symptoms = self.extract_symptoms_from_analysis(analysis)

            # Test CHP relevance
            chp_relevance = self.test_chp_relevance(extracted_symptoms, expected_chp_topics)

            # Test PubMed relevance (removed - now handled by evidence relevance)
            # pubmed_relevance = self.test_pubmed_relevance(analysis, symptoms)

            # Test medical evidence gathering
            medical_evidence = self.test_medical_evidence_gathering(symptoms)

            # Calculate evidence relevance score
            evidence_relevance = self.calculate_evidence_relevance(medical_evidence, symptoms)

            test_result = {
                "test_name": test_name,
                "symptoms": symptoms,
                "extracted_symptoms": extracted_symptoms,
                "status": "PASSED",
                "chp_relevance": chp_relevance,
                # "pubmed_relevance": pubmed_relevance,  # Removed
                "evidence_relevance": evidence_relevance,
                "medical_evidence": medical_evidence,
                "analysis_preview": analysis[:200] + "..." if len(analysis) > 200 else analysis
            }

            return test_result

        except Exception as e:
            return {
                "test_name": test_name,
                "symptoms": symptoms,
                "status": "FAILED",
                "error": str(e),
                "response": None
            }

    def test_ai_analysis_mock(self, symptoms, expected_chp_topics=None, test_name="", age=30, gender="Áî∑"):
        """Mock version of AI analysis test for development"""
        print(f"\nüß™ Testing: {test_name} (MOCK MODE)")
        print(f"   Patient: Age {age}, Gender {gender}")
        print(f"   Symptoms: {symptoms}")

        # Create realistic form data like a real user entry
        form_data = {
            "age": age,
            "gender": gender,
            "symptoms": symptoms,
            "language": "zh-TW",
            "location": "È¶ôÊ∏ØÂ≥∂",
            "chronicConditions": "",
            "locationDetails": {
                "region": "È¶ôÊ∏ØÂ≥∂",
                "district": "‰∏≠Ë•øÂçÄ",
                "area": "‰∏≠Áí∞"
            },
            "detailedHealthInfo": {
                "height": "",
                "weight": "",
                "medications": "",
                "allergies": "",
                "surgeries": "",
                "bloodThinner": False,
                "recentVisit": False,
                "cpapMachine": False,
                "looseTeeth": False
            },
            "uiLanguage": "zh-TW"
        }

        # Mock AI analysis response based on symptoms and patient data
        symptom_text = "„ÄÅ".join(symptoms)
        if "ÂñâÂö®Áóõ" in symptoms or "ÈºªÂ°û" in symptoms:
            diagnosis = "ÊôÆÈÄöÊÑüÂÜíÊàñ‰∏äÂëºÂê∏ÈÅìÊÑüÊüì"
        elif "ËÖπÁóõ" in symptoms or "ËÖπÁÄâ" in symptoms:
            diagnosis = "ËÖ∏ËÉÉÁÇéÊàñÈ£üÁâ©‰∏≠ÊØí"
        elif "ËÉ∏Áóõ" in symptoms or "ÂëºÂê∏Âõ∞Èõ£" in symptoms:
            diagnosis = "ÂøÉËáüÊàñÂëºÂê∏Á≥ªÁµ±ÂïèÈ°å"
        else:
            diagnosis = "‰∏ÄËà¨ÊÄß‰∏çÈÅ©"

        mock_analysis = f"""
        ÊÇ£ËÄÖË≥áÊñôÔºö{age}Ê≠≤{gender}ÊÄß
        ÁóáÁãÄÂàÜÊûêÔºöÊÇ£ËÄÖÂá∫Áèæ{symptom_text}Á≠âÁóáÁãÄÔºåÂèØËÉΩÊòØ{diagnosis}ÂºïËµ∑„ÄÇ
        Áõ∏ÈóúÂ∞àÁßëÔºöÂÖßÁßë
        Á∑äÊÄ•Á®ãÂ∫¶Ôºö‰∏ÄËà¨ÈñÄË®∫Â∞±ÈÜ´
        Âª∫Ë≠∞ÔºöÂª∫Ë≠∞Âà∞ÈÜ´Èô¢Ê™¢Êü•ÔºåÈÅµÈÜ´ÂõëÊ≤ªÁôÇ„ÄÇ
        """

        print(f"   üìã Mock Form Data: Age {form_data['age']}, Gender {form_data['gender']}, Location {form_data['location']}")

        # Extract symptoms from analysis for CHP mapping
        extracted_symptoms = self.extract_symptoms_from_analysis(mock_analysis)

        # Test CHP relevance
        chp_relevance = self.test_chp_relevance(extracted_symptoms, expected_chp_topics)

        # Test medical evidence gathering
        medical_evidence = self.test_medical_evidence_gathering(symptoms)

        # Calculate evidence relevance score
        evidence_relevance = self.calculate_evidence_relevance(medical_evidence, symptoms)

        test_result = {
            "test_name": test_name,
            "symptoms": symptoms,
            "patient_data": {
                "age": age,
                "gender": gender,
                "symptoms": symptoms,
                "location": form_data["location"]
            },
            "extracted_symptoms": extracted_symptoms,
            "status": "PASSED",
            "chp_relevance": chp_relevance,
            "evidence_relevance": evidence_relevance,
            "medical_evidence": medical_evidence,
            "analysis_preview": mock_analysis[:200] + "..." if len(mock_analysis) > 200 else mock_analysis
        }

        return test_result

    def extract_symptoms_from_analysis(self, analysis_text):
        """Extract medical terms from AI analysis text"""
        symptoms = []

        # Look for symptom sections in both Chinese and English analysis
        import re

        # Common patterns for symptom extraction - both languages
        patterns = [
            # Chinese patterns
            r'ÁóáÁãÄÂàÜÊûêÔºö(.*?)(?=Áõ∏ÈóúÂ∞àÁßë|Á∑äÊÄ•Á®ãÂ∫¶|Ë≥áË®ä|$)',
            r'‰∏ªË¶ÅÁóáÁãÄÂåÖÊã¨Ôºö(.*?)(?=Áõ∏ÈóúÂ∞àÁßë|Á∑äÊÄ•Á®ãÂ∫¶|Ë≥áË®ä|$)',
            r'ÊÇ£ËÄÖÂá∫Áèæ(.*?)(?=Áõ∏ÈóúÂ∞àÁßë|Á∑äÊÄ•Á®ãÂ∫¶|Ë≥áË®ä|$)',
            # English patterns
            r'Symptoms include:(.*?)(?=Specialty|Emergency|Information|$)',
            r'Patient presents with(.*?)(?=Specialty|Emergency|Information|$)',
            r'Key symptoms:(.*?)(?=Specialty|Emergency|Information|$)'
        ]

        for pattern in patterns:
            match = re.search(pattern, analysis_text, re.DOTALL | re.IGNORECASE)
            if match:
                symptom_text = match.group(1)
                # Extract medical terms - both Chinese and English
                medical_terms = re.findall(r'[\u4e00-\u9fff]{2,10}|[A-Za-z][a-z]+(?: [a-z]+)*', symptom_text)
                symptoms.extend(medical_terms)
                break

        # If no structured patterns found, extract all medical-sounding terms
        if not symptoms:
            # Look for common medical terms in the text
            medical_terms = re.findall(r'\b(?:acute|chronic|severe|mild|viral|bacterial|infection|syndrome|disease|disorder|condition)\b', analysis_text, re.IGNORECASE)
            chinese_medical = re.findall(r'[\u4e00-\u9fff]{2,6}(?:Áóá|ÁÇé|ÁóÖ|ÊØí|Áóõ|ÁÄâ|ÁÜ±)', analysis_text)
            symptoms.extend(medical_terms + chinese_medical)

        return list(set(symptoms))  # Remove duplicates

    def test_chp_relevance(self, symptoms, expected_topics=None):
        """Test CHP content relevance for given symptoms"""
        if not self.chp_content:
            return {"score": 0, "matched_topics": [], "error": "CHP content not loaded"}

        relevant_entries = []
        matched_symptoms = []

        # Symptom to CHP topic mapping (expanded comprehensive coverage)
        symptom_mappings = {
            # Cardiovascular & Heart
            'ÂøÉËáüÁóÖ': ['ÂøÉËáüÁóÖ', 'ÂøÉË°ÄÁÆ°ÁñæÁóÖ', 'ÂÜ†ÂøÉÁóÖ'],
            'È´òË°ÄÂ£ì': ['ÂøÉËáüÁóÖ', 'È´òË°ÄÂ£ì', 'ÂøÉË°ÄÁÆ°ÁñæÁóÖ'],
            'ËÉ∏Áóõ': ['ÂøÉËáüÁóÖ', 'ÂøÉË°ÄÁÆ°ÁñæÁóÖ'],
            'ÂøÉÊÇ∏': ['ÂøÉËáüÁóÖ', 'ÂøÉË°ÄÁÆ°ÁñæÁóÖ'],
            'ÂøÉË∑≥': ['ÂøÉËáüÁóÖ', 'ÂøÉË°ÄÁÆ°ÁñæÁóÖ'],
            'ÂøÉÂæã‰∏çÊï¥': ['ÂøÉËáüÁóÖ', 'ÂøÉË°ÄÁÆ°ÁñæÁóÖ'],
            'ÂøÉËáüË°∞Á´≠': ['ÂøÉËáüÁóÖ', 'ÂøÉË°ÄÁÆ°ÁñæÁóÖ'],
            '‰∏≠È¢®': ['‰∏≠È¢®', 'ËÖ¶Ë°ÄÁÆ°ÁñæÁóÖ'],
            'ÂøÉ': ['ÂøÉËáüÁóÖ', 'ÂøÉË°ÄÁÆ°ÁñæÁóÖ'],
            'heart': ['ÂøÉËáüÁóÖ'],
            'cardiac': ['ÂøÉËáüÁóÖ'],
            'cardiovascular': ['ÂøÉË°ÄÁÆ°ÁñæÁóÖ'],

            # Respiratory & Infectious
            'ÊµÅÊÑü': ['‰πôÂûãÊµÅÊÑüÂóúË°ÄÊ°øËèåÊÑüÊüì', 'Â≠£ÁØÄÊÄßÊµÅÊÑü', 'Â≠£ÁØÄÊµÅË°åÊÄßÊÑüÂÜí', 'ÊµÅË°åÊÄßÊÑüÂÜí'],
            'ÊÑüÂÜí': ['2019ÂÜ†ÁãÄÁóÖÊØíÁóÖ', 'Â≠£ÁØÄÊµÅË°åÊÄßÊÑüÂÜí', 'ÊµÅË°åÊÄßÊÑüÂÜí'],
            'Âí≥ÂóΩ': ['2019ÂÜ†ÁãÄÁóÖÊØíÁóÖ', 'ËÇ∫ÁÇéÁêÉËèåÊÑüÊüì', 'ËÇ∫ÁÇéÊîØÂéüÈ´îÊÑüÊüì', 'Â≠£ÁØÄÊµÅË°åÊÄßÊÑüÂÜí'],
            'ÁôºÁáí': ['2019ÂÜ†ÁãÄÁóÖÊØíÁóÖ', 'Ê∞¥Áóò', 'ÊâãË∂≥Âè£ÁóÖ', 'Â≠£ÁØÄÊµÅË°åÊÄßÊÑüÂÜí', 'ÂÇ∑ÂØí'],
            'ÂñâÂö®Áóõ': ['2019ÂÜ†ÁãÄÁóÖÊØíÁóÖ', 'Áå©Á¥ÖÁÜ±', 'Â≠£ÁØÄÊµÅË°åÊÄßÊÑüÂÜí'],
            'ÂëºÂê∏Âõ∞Èõ£': ['2019ÂÜ†ÁãÄÁóÖÊØíÁóÖ', 'ËÇ∫ÁÇéÁêÉËèåÊÑüÊüì', 'ÂìÆÂñò'],
            'ËÇ∫ÁÇé': ['ËÇ∫ÁÇéÁêÉËèåÊÑüÊüì', 'ËÇ∫ÁÇéÊîØÂéüÈ´îÊÑüÊüì', 'ËÇ∫ÁÇé'],
            'ÈºªÂ°û': ['2019ÂÜ†ÁãÄÁóÖÊØíÁóÖ', 'Â≠£ÁØÄÊµÅË°åÊÄßÊÑüÂÜí'],
            'ÊîØÊ∞£ÁÆ°ÁÇé': ['ËÇ∫ÁÇéÊîØÂéüÈ´îÊÑüÊüì'],
            'ÂìÆÂñò': ['ÂìÆÂñò'],
            'ËÇ∫ÁµêÊ†∏': ['ËÇ∫ÁµêÊ†∏'],
            'tuberculosis': ['ËÇ∫ÁµêÊ†∏'],
            'influenza': ['Â≠£ÁØÄÊÄßÊµÅÊÑü', 'Â≠£ÁØÄÊµÅË°åÊÄßÊÑüÂÜí'],
            'flu': ['Â≠£ÁØÄÊÄßÊµÅÊÑü', 'Â≠£ÁØÄÊµÅË°åÊÄßÊÑüÂÜí'],
            'cough': ['2019ÂÜ†ÁãÄÁóÖÊØíÁóÖ'],
            'fever': ['2019ÂÜ†ÁãÄÁóÖÊØíÁóÖ'],
            'sore throat': ['2019ÂÜ†ÁãÄÁóÖÊØíÁóÖ'],

            # Gastrointestinal & Digestive
            'ËÖπÁóõ': ['Ë´æÂ¶ÇÁóÖÊØíÊÑüÊüì', 'È£üÁâ©‰∏≠ÊØí', 'ËÖ∏ËÉÉÁÇé', 'ËÖ∏ËÉÉÁÇé', 'Èúç‰∫Ç', 'ÂÇ∑ÂØí'],
            'ËÖπÁÄâ': ['Ë´æÂ¶ÇÁóÖÊØíÊÑüÊüì', 'È£üÁâ©‰∏≠ÊØí', 'ËÖ∏ËÉÉÁÇé', 'Èúç‰∫Ç', 'ÂÇ∑ÂØí'],
            'ÂòîÂêê': ['Ë´æÂ¶ÇÁóÖÊØíÊÑüÊüì', 'È£üÁâ©‰∏≠ÊØí', 'ËÖ∏ËÉÉÁÇé', 'Èúç‰∫Ç', 'ÂÇ∑ÂØí'],
            'ËÉÉÁóõ': ['ËÖ∏ËÉÉÁÇé', 'Ê∂àÂåñ‰∏çËâØ', 'Ê∂àÂåñÊÄßÊΩ∞Áòç'],
            'ÂôÅÂøÉ': ['ËÖ∏ËÉÉÁÇé', 'È£üÁâ©‰∏≠ÊØí'],
            'ËÉÉËÖ∏': ['ËÖ∏ËÉÉÁÇé'],
            'ËÖ∏ËÉÉÁÇé': ['ËÖ∏ËÉÉÁÇé'],
            'È£üÁâ©‰∏≠ÊØí': ['È£üÁâ©‰∏≠ÊØí'],
            'Ê∂àÂåñ‰∏çËâØ': ['Ê∂àÂåñ‰∏çËâØ'],
            'Ê∂àÂåñÊÄßÊΩ∞Áòç': ['Ê∂àÂåñÊÄßÊΩ∞Áòç'],
            'ËÇùÁÇé': ['ÁóÖÊØíÊÄßËÇùÁÇé'],
            'ËÜΩÁü≥': ['ËÜΩÁü≥Áóá'],
            'ËÉ∞ËáüÁÇé': ['ÊÄ•ÊÄßËÉ∞ËáüÁÇé'],
            'food poisoning': ['È£üÁâ©‰∏≠ÊØí'],
            'gastroenteritis': ['ËÖ∏ËÉÉÁÇé'],
            'diarrhea': ['Ë´æÂ¶ÇÁóÖÊØíÊÑüÊüì'],
            'vomiting': ['Ë´æÂ¶ÇÁóÖÊØíÊÑüÊüì'],
            'nausea': ['ËÖ∏ËÉÉÁÇé'],
            'stomach': ['ËÖ∏ËÉÉÁÇé'],

            # Skin & Dermatological
            'ÁöÆÁñπ': ['Ê∞¥Áóò', 'ÊâãË∂≥Âè£ÁóÖ', 'È∫ªÁñπ', 'Áå©Á¥ÖÁÜ±', 'Âæ∑ÂúãÈ∫ªÁñπ'],
            'Ê∞¥Ê≥°': ['Ê∞¥Áóò'],
            'Âè£ËÖîÊΩ∞Áòç': ['ÊâãË∂≥Âè£ÁóÖ'],
            'ÊâãË∂≥ÁöÆÁñπ': ['ÊâãË∂≥Âè£ÁóÖ'],
            'È∫ªÁñπ': ['È∫ªÁñπ'],
            'Âæ∑ÂúãÈ∫ªÁñπ': ['Âæ∑ÂúãÈ∫ªÁñπ'],
            'Áå©Á¥ÖÁÜ±': ['Áå©Á¥ÖÁÜ±'],
            'Â∏∂ÁãÄÁö∞Áñπ': ['Â∏∂ÁãÄÁö∞Áñπ'],
            'ÁöÆËÜöÊÑüÊüì': ['ÁöÆËÜöÊÑüÊüì'],
            'rash': ['Ê∞¥Áóò', 'ÊâãË∂≥Âè£ÁóÖ'],
            'blister': ['Ê∞¥Áóò'],
            'measles': ['È∫ªÁñπ'],
            'chickenpox': ['Ê∞¥Áóò'],
            'shingles': ['Â∏∂ÁãÄÁö∞Áñπ'],

            # Mental Health & Psychiatric
            'ÊäëÈ¨±': ['ÂøÉÁêÜÂÅ•Â∫∑', 'ÊäëÈ¨±Áóá', 'Á≤æÁ•ûÂÅ•Â∫∑'],
            'ÁÑ¶ÊÖÆ': ['ÂøÉÁêÜÂÅ•Â∫∑', 'ÁÑ¶ÊÖÆÁóá', 'Á≤æÁ•ûÂÅ•Â∫∑'],
            'Â£ìÂäõÂ§ß': ['ÂøÉÁêÜÂÅ•Â∫∑', 'Â£ìÂäõÁÆ°ÁêÜ', 'Á≤æÁ•ûÂÅ•Â∫∑'],
            'Á≤æÁ•û': ['Á≤æÁ•ûÂÅ•Â∫∑'],
            'ÊÉÖÁ∑í': ['ÂøÉÁêÜÂÅ•Â∫∑'],
            'Â£ìÂäõ': ['Â£ìÂäõÁÆ°ÁêÜ'],
            'ÁÑ¶ÊÖÆÁóá': ['ÁÑ¶ÊÖÆÁóá'],
            'ÊäëÈ¨±Áóá': ['ÊäëÈ¨±Áóá'],
            'Á≤æÁ•ûÂÅ•Â∫∑': ['Á≤æÁ•ûÂÅ•Â∫∑'],
            'depression': ['ÂøÉÁêÜÂÅ•Â∫∑', 'ÊäëÈ¨±Áóá'],
            'anxiety': ['ÂøÉÁêÜÂÅ•Â∫∑', 'ÁÑ¶ÊÖÆÁóá'],
            'stress': ['ÂøÉÁêÜÂÅ•Â∫∑', 'Â£ìÂäõÁÆ°ÁêÜ'],
            'mental': ['ÂøÉÁêÜÂÅ•Â∫∑'],
            'mood': ['ÂøÉÁêÜÂÅ•Â∫∑'],

            # Metabolic & Endocrine
            'Á≥ñÂ∞øÁóÖ': ['Á≥ñÂ∞øÁóÖ', 'Á≥ñÂ∞øÁóÖÂèäÂÖ∂‰ΩµÁôºÁóá'],
            'Âè£Ê∏¥': ['Á≥ñÂ∞øÁóÖ'],
            'Â§öÂ∞ø': ['Á≥ñÂ∞øÁóÖ'],
            'Â§öÈ£≤': ['Á≥ñÂ∞øÁóÖ'],
            'È´îÈáçÊ∏õËºï': ['Á≥ñÂ∞øÁóÖ'],
            'Áî≤ÁãÄËÖ∫': ['Áî≤ÁãÄËÖ∫ÂäüËÉΩÊ∏õÈÄÄ'],
            'diabetes': ['Á≥ñÂ∞øÁóÖ'],
            'diabetic': ['Á≥ñÂ∞øÁóÖ'],
            'thyroid': ['Áî≤ÁãÄËÖ∫ÂäüËÉΩÊ∏õÈÄÄ'],

            # Neurological
            'È†≠Áóõ': ['2019ÂÜ†ÁãÄÁóÖÊØíÁóÖ', 'ÂÅèÈ†≠Áóõ', 'È†≠Áóõ'],
            'È†≠Êöà': ['ÂøÉËáüÁóÖ', 'Á≥ñÂ∞øÁóÖ', 'Ë≤ßË°Ä', 'È†≠Êöà'],
            '‰∏≠È¢®': ['‰∏≠È¢®'],
            'ÂÅèÈ†≠Áóõ': ['ÂÅèÈ†≠Áóõ'],
            'È†≠Êöà': ['È†≠Êöà'],
            'Áô≤Áôá': ['Áô≤Áôá'],
            'Â∏ïÈáëÊ£ÆÁóÖ': ['Â∏ïÈáëÊ£ÆÁóÖ'],
            'ÈòøËå≤Êµ∑ÈªòÁóÖ': ['Ë™çÁü•ÈöúÁ§ôÁóá'],
            'headache': ['2019ÂÜ†ÁãÄÁóÖÊØíÁóÖ', 'ÂÅèÈ†≠Áóõ'],
            'dizziness': ['ÂøÉËáüÁóÖ', 'Á≥ñÂ∞øÁóÖ'],
            'stroke': ['‰∏≠È¢®'],
            'migraine': ['ÂÅèÈ†≠Áóõ'],
            'epilepsy': ['Áô≤Áôá'],
            'parkinson': ['Â∏ïÈáëÊ£ÆÁóÖ'],

            # Cancer & Oncology
            'ÁôåÁóá': ['ÁôåÁóáÈ†êÈò≤'],
            'ËÖ´Áò§': ['ÁôåÁóáÈ†êÈò≤'],
            '‰π≥Áôå': ['‰π≥Áôå'],
            'Â§ßËÖ∏Áôå': ['Â§ßËÖ∏Áôå'],
            'ËÇ∫Áôå': ['ËÇ∫Áôå'],
            'ËÇùÁôå': ['ËÇùÁôå'],
            'Áôå': ['ÁôåÁóáÈ†êÈò≤'],
            'cancer': ['ÁôåÁóáÈ†êÈò≤'],
            'tumor': ['ÁôåÁóáÈ†êÈò≤'],
            'breast cancer': ['‰π≥Áôå'],
            'colorectal cancer': ['Â§ßËÖ∏Áôå'],
            'lung cancer': ['ËÇ∫Áôå'],
            'liver cancer': ['ËÇùÁôå'],
            # Cancer symptoms mapping
            '‰π≥ÊàøËÖ´Â°ä': ['‰π≥Áôå'],
            '‰π≥È†≠ÂàÜÊ≥å': ['‰π≥Áôå'],
            '‰π≥Êàø': ['‰π≥Áôå'],
            'Â∞øÈ†ª': ['ÊîùË≠∑ËÖ∫Áôå'],
            'Â∞øÊÄ•': ['ÊîùË≠∑ËÖ∫Áôå'],
            'Â§úÂ∞ø': ['ÊîùË≠∑ËÖ∫Áôå'],
            'ÊîùË≠∑ËÖ∫': ['ÊîùË≠∑ËÖ∫Áôå'],
            'ÂâçÂàóËÖ∫': ['ÊîùË≠∑ËÖ∫Áôå'],
            'ÊåÅÁ∫åÂí≥ÂóΩ': ['ËÇ∫Áôå'],
            'Âí≥Ë°Ä': ['ËÇ∫Áôå'],
            'Áù™‰∏∏ËÖ´Â§ß': ['Áù™‰∏∏Áôå'],
            'Áù™‰∏∏': ['Áù™‰∏∏Áôå'],
            'ÁñºÁóõ': ['Áù™‰∏∏Áôå'],
            'ËÖπËÑπ': ['ÂçµÂ∑¢Áôå'],
            'ËÖπÁóõ': ['ÂçµÂ∑¢Áôå', 'Â§ßËÖ∏Áôå'],
            '‰∏çÊ≠£Â∏∏Èô∞ÈÅìÂá∫Ë°Ä': ['Â≠êÂÆÆÈ†∏Áôå'],
            'È™®ÁõÜÁóõ': ['Â≠êÂÆÆÈ†∏Áôå', 'ÂçµÂ∑¢Áôå'],
            'Â§ß‰æøÁøíÊÖ£ÊîπËÆä': ['Â§ßËÖ∏Áôå'],
            'Ë°Ä‰æø': ['Â§ßËÖ∏Áôå'],
            'È´îÈáçÊ∏õËºï': ['ËÇ∫Áôå', 'ËÇùÁôå', 'Â§ßËÖ∏Áôå'],

            # Women's Health
            '‰π≥Áôå': ['‰π≥Áôå'],
            'Â≠êÂÆÆÈ†∏Áôå': ['Â≠êÂÆÆÈ†∏Áôå'],
            'ÂçµÂ∑¢Áôå': ['ÂçµÂ∑¢Áôå'],
            'Â≠êÂÆÆËÇåÁò§': ['Â≠êÂÆÆËÇåÁò§'],
            'Â≠êÂÆÆÂÖßËÜúÁï∞‰Ωç': ['Â≠êÂÆÆÂÖßËÜúÁï∞‰ΩçÁóá'],
            'Êõ¥Âπ¥Êúü': ['Êõ¥Âπ¥Êúü'],
            'Á∂ìÁóõ': ['Á∂ìÁóõ'],
            '‰∏çÂ≠ï': ['‰∏çËÇ≤Áóá'],
            'pregnancy': ['Êá∑Â≠ïËàáÊ∫ñÂÇôÊá∑Â≠ï'],
            'menopause': ['Êõ¥Âπ¥Êúü'],
            'dysmenorrhea': ['Á∂ìÁóõ'],

            # Men's Health
            'ÊîùË≠∑ËÖ∫': ['ÊîùË≠∑ËÖ∫Áôå'],
            'ÂâçÂàóËÖ∫': ['ÊîùË≠∑ËÖ∫Áôå'],
            'Áù™‰∏∏Áôå': ['Áù™‰∏∏Áôå'],
            'prostate': ['ÊîùË≠∑ËÖ∫Áôå'],
            'testicular': ['Áù™‰∏∏Áôå'],

            # Pediatric & Children's Health
            'ÊâãË∂≥Âè£': ['ÊâãË∂≥Âè£ÁóÖ'],
            'Ê∞¥Áóò': ['Ê∞¥Áóò'],
            'È∫ªÁñπ': ['È∫ªÁñπ'],
            'Âæ∑ÂúãÈ∫ªÁñπ': ['Âæ∑ÂúãÈ∫ªÁñπ'],
            'ÁôæÊó•Âí≥': ['ÁôæÊó•Âí≥'],
            'Â∞èÂÖíÈ∫ªÁóπ': ['Â∞èÂÖíÈ∫ªÁóπÁóá'],
            'child': ['ÂÖíÁ´•ÂÅ•Â∫∑'],
            'infant': ['Â¨∞ÂÖíÂÅ•Â∫∑'],
            'pediatric': ['ÂÖíÁ´•ÂÅ•Â∫∑'],

            # Eye & ENT
            'ÁµêËÜúÁÇé': ['ÂÇ≥ÊüìÊÄßÊÄ•ÊÄßÁµêËÜúÁÇé'],
            'ÁúºÁ¥Ö': ['ÂÇ≥ÊüìÊÄßÊÄ•ÊÄßÁµêËÜúÁÇé'],
            'ÈùíÂÖâÁúº': ['ÈùíÂÖâÁúº'],
            'ÁôΩÂÖßÈöú': ['ÁôΩÂÖßÈöú'],
            '‰∏≠ËÄ≥ÁÇé': ['‰∏≠ËÄ≥ÁÇé'],
            'ËÄ≥È≥¥': ['ËÄ≥È≥¥'],
            'Áúº': ['ÂÇ≥ÊüìÊÄßÊÄ•ÊÄßÁµêËÜúÁÇé'],
            'ËÄ≥': ['‰∏≠ËÄ≥ÁÇé'],
            'conjunctivitis': ['ÂÇ≥ÊüìÊÄßÊÄ•ÊÄßÁµêËÜúÁÇé'],
            'glaucoma': ['ÈùíÂÖâÁúº'],
            'cataract': ['ÁôΩÂÖßÈöú'],
            'otitis': ['‰∏≠ËÄ≥ÁÇé'],

            # Bone & Joint
            'È™®Ë≥™ÁñèÈ¨Ü': ['È™®Ë≥™ÁñèÈ¨Ü'],
            'ÈóúÁØÄÁÇé': ['ÈóúÁØÄÁÇé'],
            'È™®Êäò': ['È™®Êäò'],
            'osteoporosis': ['È™®Ë≥™ÁñèÈ¨Ü'],
            'arthritis': ['ÈóúÁØÄÁÇé'],
            'fracture': ['È™®Êäò'],

            # Other Medical Conditions
            'Ë≤ßË°Ä': ['Ë≤ßË°Ä'],
            'ËÖéÁóÖ': ['ÊÖ¢ÊÄßËÖéÁóÖ'],
            'ËÇùÁóÖ': ['ÁóÖÊØíÊÄßËÇùÁÇé'],
            'ËÖéÁµêÁü≥': ['ËÖéÁµêÁü≥'],
            'ËÜΩÁµêÁü≥': ['ËÜΩÁü≥Áóá'],
            'ËÖé': ['ÊÖ¢ÊÄßËÖéÁóÖ'],
            'ËÇù': ['ÁóÖÊØíÊÄßËÇùÁÇé'],
            'anemia': ['Ë≤ßË°Ä'],
            'kidney': ['ÊÖ¢ÊÄßËÖéÁóÖ'],
            'liver': ['ÁóÖÊØíÊÄßËÇùÁÇé'],

            # Infectious Diseases
            'ÊÑõÊªãÁóÖ': ['‰∫∫È°ûÂÖçÁñ´Áº∫‰πèÁóÖÊØíÊÑüÊüì'],
            'ËâæÊªãÁóÖ': ['‰∫∫È°ûÂÖçÁñ´Áº∫‰πèÁóÖÊØíÊÑüÊüì'],
            'HIV': ['‰∫∫È°ûÂÖçÁñ´Áº∫‰πèÁóÖÊØíÊÑüÊüì'],
            'ÊÑõÊªã': ['‰∫∫È°ûÂÖçÁñ´Áº∫‰πèÁóÖÊØíÊÑüÊüì'],
            'Ê¢ÖÊØí': ['Ê¢ÖÊØí'],
            'Ê∑ãÁóÖ': ['Ê∑ãÁóÖ'],
            'Ë°£ÂéüÈ´î': ['Ë°£ÂéüÈ´îÊÑüÊüì'],
            'ÁîüÊÆñÂô®Áö∞Áñπ': ['ÁîüÊÆñÂô®Áö∞Áñπ'],
            'syphilis': ['Ê¢ÖÊØí'],
            'gonorrhea': ['Ê∑ãÁóÖ'],
            'chlamydia': ['Ë°£ÂéüÈ´îÊÑüÊüì'],
            'herpes': ['ÁîüÊÆñÂô®Áö∞Áñπ'],
            # STD symptoms mapping
            'Áï∞Â∏∏ÂàÜÊ≥åÁâ©': ['Ê∑ãÁóÖ', 'Ë°£ÂéüÈ´îÊÑüÊüì', 'Ê¢ÖÊØí'],
            'Â∞øÈÅìÁóõ': ['Ê∑ãÁóÖ', 'Ë°£ÂéüÈ´îÊÑüÊüì'],
            'Èô∞ÈÉ®ÊêîÁô¢': ['Ê∑ãÁóÖ', 'Ë°£ÂéüÈ´îÊÑüÊüì', 'ÁîüÊÆñÂô®Áö∞Áñπ'],
            'Èô∞ÈÉ®Áóõ': ['Ë°£ÂéüÈ´îÊÑüÊüì', 'Ê∑ãÁóÖ'],
            'ÁÑ°ÁóáÁãÄÊÑüÊüì': ['Ë°£ÂéüÈ´îÊÑüÊüì'],
            'ÁîüÊÆñÂô®ÊΩ∞Áòç': ['Ê¢ÖÊØí', 'ÁîüÊÆñÂô®Áö∞Áñπ'],
            'ÁîüÊÆñÂô®': ['Ê¢ÖÊØí', 'ÁîüÊÆñÂô®Áö∞Áñπ', 'Ê∑ãÁóÖ', 'Ë°£ÂéüÈ´îÊÑüÊüì'],
            'Ê∑ãÂ∑¥ÁµêËÖ´Â§ß': ['Ê¢ÖÊØí', '‰∫∫È°ûÂÖçÁñ´Áº∫‰πèÁóÖÊØíÊÑüÊüì'],
            'ÂàÜÊ≥åÁâ©': ['Ê∑ãÁóÖ', 'Ë°£ÂéüÈ´îÊÑüÊüì'],
            'Â∞øÈÅì': ['Ê∑ãÁóÖ'],
            'Èô∞ÈÉ®': ['Ë°£ÂéüÈ´îÊÑüÊüì', 'Ê∑ãÁóÖ', 'ÁîüÊÆñÂô®Áö∞Áñπ'],
            'ÊΩ∞Áòç': ['Ê¢ÖÊØí', 'ÁîüÊÆñÂô®Áö∞Áñπ'],

            # Other Symptoms
            'Áñ≤ÂÄ¶': ['Á≥ñÂ∞øÁóÖ', 'ÂøÉËáüÁóÖ', 'Ë≤ßË°Ä', 'Áî≤ÁãÄËÖ∫ÂäüËÉΩÊ∏õÈÄÄ'],
            'È´îÈáç': ['Á≥ñÂ∞øÁóÖ', 'ÁáüÈ§ä'],
            'ÁáüÈ§ä': ['È£≤È£üËàáÁáüÈ§ä'],
            'ÁáüÈ§ä‰∏çËâØ': ['ÁáüÈ§ä‰∏çËâØ'],
            'ËÇ•ËÉñ': ['ËÇ•ËÉñ'],
            'ÊäΩÁÖô': ['ÊàíÁÖô'],
            'ÈÖóÈÖí': ['ÈÖóÈÖí'],
            'Ëó•Áâ©': ['Ëó•Áâ©Êø´Áî®'],
            'fatigue': ['Á≥ñÂ∞øÁóÖ', 'ÂøÉËáüÁóÖ'],
            'tired': ['Á≥ñÂ∞øÁóÖ', 'ÂøÉËáüÁóÖ'],
            'obesity': ['ËÇ•ËÉñ'],
            'smoking': ['ÊàíÁÖô'],
            'alcohol': ['ÈÖóÈÖí'],
            'drug': ['Ëó•Áâ©Êø´Áî®'],

            # General Health & Prevention
            'Áñ´Ëãó': ['Áñ´Ëãó'],
            'È†êÈò≤': ['È†êÈò≤Êé•Á®Æ'],
            'ÂÅ•Â∫∑Ê™¢Êü•': ['ÂÅ•Â∫∑Ê™¢Êü•'],
            'ÈÅãÂãï': ['Áí∞Â¢ÉÂÅ•Â∫∑ËàáÊêçÂÇ∑È†êÈò≤'],
            'Áí∞Â¢É': ['Áí∞Â¢ÉÂÅ•Â∫∑ËàáÊêçÂÇ∑È†êÈò≤'],
            'ËÅ∑Ê•≠ÂÆâÂÖ®': ['ËÅ∑Ê•≠ÂÆâÂÖ®'],
            'Áñ´Ëãó': ['Áñ´Ëãó'],
            'vaccine': ['Áñ´Ëãó'],
            'prevention': ['È†êÈò≤Êé•Á®Æ'],
            'exercise': ['Áí∞Â¢ÉÂÅ•Â∫∑ËàáÊêçÂÇ∑È†êÈò≤'],
            'environment': ['Áí∞Â¢ÉÂÅ•Â∫∑ËàáÊêçÂÇ∑È†êÈò≤'],
            'occupational': ['ËÅ∑Ê•≠ÂÆâÂÖ®']
        }

        for symptom in symptoms:
            for key, topics in symptom_mappings.items():
                if key in symptom or symptom in key:
                    matched_symptoms.append(symptom)
                    for topic in topics:
                        # Find actual CHP entries
                        chp_entries = [entry for entry in self.chp_content
                                     if entry.get('title', '').find(topic) >= 0]
                        relevant_entries.extend(chp_entries)
                    break

        # Remove duplicates
        seen_urls = set()
        unique_entries = []
        for entry in relevant_entries:
            if entry['url'] not in seen_urls:
                seen_urls.add(entry['url'])
                unique_entries.append(entry)

        # Calculate relevance score
        total_matched = len(matched_symptoms)
        total_entries = len(unique_entries)

        if total_matched == 0:
            relevance_score = 0
        else:
            # Score based on coverage and quality
            coverage_score = min(total_entries / max(total_matched, 1), 1.0) * 50
            quality_score = min(total_entries * 10, 50)  # Max 50 points for quality
            relevance_score = min(coverage_score + quality_score, 100)

        return {
            "score": round(relevance_score, 1),
            "matched_symptoms": matched_symptoms,
            "matched_topics": [entry['title'].replace('Ë°ûÁîüÈò≤Ë≠∑‰∏≠ÂøÉ - ', '') for entry in unique_entries[:3]],
            "total_entries": total_entries,
            "expected_topics": expected_topics or []
        }

    def test_pubmed_relevance(self, analysis_text, original_symptoms):
        """Test PubMed reference relevance"""
        # Enhanced scoring based on evidence quality indicators

        # Evidence quality indicators
        pubmed_mentions = analysis_text.count('PubMed') + analysis_text.count('ÈÜ´Â≠∏ÊñáÁçª') + analysis_text.count('Á†îÁ©∂')
        evidence_indicators = [
            'Ëá®Â∫äË©¶È©ó', 'Ëá®Â∫äÁ†îÁ©∂', 'ÈÜ´Â≠∏Ë≠âÊìö', 'Á≥ªÁµ±ÊÄßÂõûÈ°ß', 'metaÂàÜÊûê',
            'clinical trial', 'clinical study', 'medical evidence', 'systematic review', 'meta-analysis',
            'Á†îÁ©∂ÁµêÊûú', 'Ë≠âÊìöÈ°ØÁ§∫', 'ÊñáÁçªÊîØÊåÅ', 'ÈÜ´Â≠∏ÊúüÂàä', 'peer-reviewed'
        ]

        # Count evidence quality indicators
        evidence_count = sum(1 for indicator in evidence_indicators if indicator in analysis_text)

        # Medical terminology indicators (shows scientific rigor)
        medical_terms = [
            'ÁóÖÂõ†', 'ÁóÖÁêÜ', 'Ë®∫Êñ∑', 'Ê≤ªÁôÇ', 'È†êÂæå', 'È†êÈò≤', 'È¢®Èö™Âõ†Á¥†',
            'etiology', 'pathology', 'diagnosis', 'treatment', 'prognosis', 'prevention', 'risk factors',
            'Ëá®Â∫äÁâπÂæµ', 'ÊµÅË°åÁóÖÂ≠∏', 'ÁîüÁâ©Ê®ôË®ò', 'Ê≤ªÁôÇÊñπÊ°à', 'ÁôÇÊïà',
            'clinical features', 'epidemiology', 'biomarkers', 'treatment protocol', 'efficacy'
        ]
        medical_term_count = sum(1 for term in medical_terms if term in analysis_text)

        # Statistical and research methodology terms
        research_terms = [
            'Áµ±Ë®à', 'È°ØËëó', 'Áõ∏Èóú', 'È†êÊ∏¨', 'ÂàÜÊûê', 'Ê®°Âûã', 'Êï∏Êìö',
            'statistics', 'significant', 'correlation', 'prediction', 'analysis', 'model', 'data',
            'p-value', 'confidence interval', 'odds ratio', 'relative risk'
        ]
        research_term_count = sum(1 for term in research_terms if term in analysis_text)

        # Calculate comprehensive score
        base_score = min(pubmed_mentions * 10, 30)  # Max 30 for mentions
        evidence_bonus = min(evidence_count * 8, 25)  # Max 25 for quality indicators
        medical_bonus = min(medical_term_count * 5, 20)  # Max 20 for medical terminology
        research_bonus = min(research_term_count * 3, 15)  # Max 15 for research methodology

        total_score = min(base_score + evidence_bonus + medical_bonus + research_bonus, 100)

        return {
            "score": round(total_score, 1),
            "has_medical_references": pubmed_mentions > 0,
            "pubmed_mentions": pubmed_mentions,
            "evidence_indicators": evidence_count,
            "medical_terms": medical_term_count,
            "research_terms": research_term_count,
            "components": {
                "base_mentions": min(pubmed_mentions * 10, 30),
                "evidence_quality": evidence_bonus,
                "medical_terminology": medical_bonus,
                "research_methodology": research_bonus
            }
        }

    def test_ai_analysis_mock(self, symptoms, expected_chp_topics, test_name, age, gender):
        """Mock version of AI analysis for testing without server"""
        try:
            # Mock patient data with proper gender handling
            patient_data = {
                "age": age,
                "gender": gender
            }

            # Mock AI analysis result
            mock_analysis = f"ÊÇ£ËÄÖ{age}Ê≠≤{gender}ÊÄßÔºåÁóáÁãÄÂåÖÊã¨Ôºö{', '.join(symptoms)}„ÄÇÂª∫Ë≠∞ÈÄ≤‰∏ÄÊ≠•Ê™¢Êü•„ÄÇ"

            # Extract symptoms (mock)
            extracted_symptoms = symptoms.copy()

            # Test CHP relevance
            chp_result = self.test_chp_relevance(symptoms, expected_chp_topics)

            # Mock PubMed relevance (deprecated)
            pubmed_result = {"score": 0}

            # Mock medical evidence gathering using actual configuration settings
            evidence_count = min(
                self.medical_search_config.get('articles_per_symptom', 2) * len(symptoms),
                self.medical_search_config.get('max_total_articles', 8)
            )
            
            # Determine sources based on configuration
            sources = []
            titles = []
            
            primary_api = self.medical_search_config.get('primary_search_api', 'pubmed')
            secondary_api = self.medical_search_config.get('secondary_search_api', 'none')
            
            if primary_api == 'pubmed':
                sources.extend(['PubMed'] * (evidence_count // 2))
                titles.extend([f"PubMed Article {i+1}" for i in range(evidence_count // 2)])
            
            if secondary_api == 'pubmed' and len(sources) < evidence_count:
                additional = evidence_count - len(sources)
                sources.extend(['PubMed'] * additional)
                titles.extend([f"Secondary PubMed Article {i+1}" for i in range(additional)])
            
            # Always include CHP content based on configuration
            if len(sources) < evidence_count:
                additional = evidence_count - len(sources)
                sources.extend(['CHP'] * additional)
                titles.extend([f"CHP Medical Content {i+1}" for i in range(additional)])

            evidence_result = {
                "success": True,
                "evidence_count": evidence_count,
                "evidence_titles": titles,
                "evidence_sources": sources,
                "evidence_urls": [f"https://{source.lower().replace(' ', '')}.example.com/article{i+1}" 
                                for i, source in enumerate(sources)],
                "has_pubmed": 'PubMed' in sources,
                "has_chp": 'CHP' in sources,
                "error": None
            }

            # Calculate evidence relevance using actual configuration
            evidence_relevance = self.calculate_evidence_relevance(evidence_result, symptoms)

            # Determine if test passed (CHP score >= 70)
            status = "PASSED" if chp_result["score"] >= 70 else "FAILED"

            return {
                "status": status,
                "test_name": test_name,
                "patient_data": patient_data,
                "symptoms": symptoms,
                "extracted_symptoms": extracted_symptoms,
                "analysis_preview": mock_analysis[:100] + "..." if len(mock_analysis) > 100 else mock_analysis,
                "chp_relevance": chp_result,
                "pubmed_relevance": pubmed_result,
                "medical_evidence": evidence_result,
                "evidence_relevance": evidence_relevance,
                "error": None
            }

        except Exception as e:
            return {
                "status": "FAILED",
                "test_name": test_name,
                "error": str(e)
            }

    def test_medical_evidence_gathering(self, symptoms):
        """Test actual medical evidence gathering from the system"""
        try:
            # Test the medical evidence API directly
            evidence_response = requests.post(
                f"{self.base_url}/api/medical-evidence",
                json={"symptoms": symptoms},
                timeout=30
            )

            if evidence_response.status_code == 200:
                evidence_data = evidence_response.json()

                # Debug: Show what evidence was actually gathered
                evidence_list = evidence_data.get("evidence", [])
                print(f"   üîç Evidence Details: {len(evidence_list)} items")
                for i, entry in enumerate(evidence_list[:3]):  # Show first 3 for debugging
                    title = entry.get("title", "No title")
                    source = entry.get("source", "No source")
                    url = entry.get("url", "No URL")
                    print(f"      {i+1}. Title: '{title[:50]}...' | Source: '{source}' | URL: '{url[:50]}...'")

                return {
                    "success": evidence_data.get("success", False),
                    "evidence_count": len(evidence_list),
                    "evidence_titles": [entry.get("title", "") for entry in evidence_list],
                    "evidence_sources": [entry.get("source", "") for entry in evidence_list],
                    "evidence_urls": [entry.get("url", "") for entry in evidence_list],  # Add URLs for counting
                    # Better detection logic - check for PubMed in title, source, or URL
                    "has_pubmed": any(
                        "pubmed" in entry.get("title", "").lower() or
                        "pubmed" in entry.get("source", "").lower() or
                        "pubmed" in entry.get("url", "").lower() or
                        "nih.gov" in entry.get("url", "").lower() or
                        "ncbi.nlm.nih.gov" in entry.get("url", "").lower()
                        for entry in evidence_list
                    ),
                    "has_chp": any(
                        "chp.gov.hk" in entry.get("url", "") or
                        "Ë°ûÁîü" in entry.get("title", "") or
                        "Ë°õÁîü" in entry.get("title", "")
                        for entry in evidence_list
                    ),
                    "error": None
                }
            else:
                return {
                    "success": False,
                    "evidence_count": 0,
                    "evidence_titles": [],
                    "evidence_sources": [],
                    "evidence_urls": [],  # Add URLs for consistency
                    "has_pubmed": False,
                    "has_chp": False,
                    "error": f"API returned {evidence_response.status_code}"
                }

        except Exception as e:
            return {
                "success": False,
                "evidence_count": 0,
                "evidence_titles": [],
                "evidence_sources": [],
                "evidence_urls": [],  # Add URLs for consistency
                "has_pubmed": False,
                "has_chp": False,
                "error": str(e)
            }

    def calculate_evidence_relevance(self, evidence_data, original_symptoms):
        """Calculate overall evidence relevance score"""
        if not evidence_data.get("success", False):
            return {"score": 0, "assessment": "No evidence available"}

        evidence_count = evidence_data.get("evidence_count", 0)
        has_pubmed = evidence_data.get("has_pubmed", False)
        has_chp = evidence_data.get("has_chp", False)

        # Base score from quantity
        quantity_score = min(evidence_count * 10, 40)  # Max 40 points for quantity

        # Quality bonus
        quality_bonus = 0
        if has_pubmed:
            quality_bonus += 30  # PubMed articles = high quality
        if has_chp:
            quality_bonus += 20   # CHP content = local relevance

        # Relevance to symptoms (basic check)
        urls = evidence_data.get("evidence_urls", [])
        symptom_relevance = sum(1 for url in urls
                              if any(symptom.lower() in url.lower()
                                    for symptom in original_symptoms))

        relevance_bonus = min(symptom_relevance * 5, 10)  # Max 10 points for relevance

        total_score = min(quantity_score + quality_bonus + relevance_bonus, 100)

        # Assessment text
        if total_score >= 70:
            assessment = "Excellent evidence coverage"
        elif total_score >= 50:
            assessment = "Good evidence coverage"
        elif total_score >= 30:
            assessment = "Basic evidence coverage"
        else:
            assessment = "Limited evidence coverage"

        return {
            "score": round(total_score, 1),
            "assessment": assessment,
            "evidence_count": evidence_count,
            "has_pubmed": has_pubmed,
            "has_chp": has_chp
        }

    def run_comprehensive_tests(self):
        """Run comprehensive test suite"""
        print("üöÄ Starting Comprehensive AI Analysis Test Suite")
        print("=" * 60)

        if not self.load_chp_content():
            print("‚ùå Cannot proceed without CHP content")
            return []

        # Test cases with various symptom combinations and patient profiles
        test_cases = [
            # Respiratory        
            # Original test cases (12)
            {
                "name": "Common Cold - Adult Male",
                "symptoms": ["ÂñâÂö®Áóõ", "ÈºªÂ°û", "ËºïÂæÆÂí≥ÂóΩ"],
                "age": "35",
                "gender": "male",
                "location": "Central and Western",
                "expected_chp": ["2019ÂÜ†ÁãÄÁóÖÊØíÁóÖ", "Â≠£ÁØÄÊµÅË°åÊÄßÊÑüÂÜí"]
            },
            {
                "name": "Flu-like - Young Female",
                "symptoms": ["ÁôºÁáí", "Âí≥ÂóΩ", "È†≠Áóõ", "ÂñâÂö®Áóõ"],
                "age": "28",
                "gender": "female",
                "location": "Wan Chai",
                "expected_chp": ["‰πôÂûãÊµÅÊÑüÂóúË°ÄÊ°øËèåÊÑüÊüì", "2019ÂÜ†ÁãÄÁóÖÊØíÁóÖ", "Â≠£ÁØÄÊµÅË°åÊÄßÊÑüÂÜí"]
            },
            {
                "name": "Severe Respiratory - Elderly",
                "symptoms": ["È´òÁáí", "ÂäáÁÉàÂí≥ÂóΩ", "ÂëºÂê∏Âõ∞Èõ£"],
                "age": "72",
                "gender": "male",
                "location": "Sha Tin",
                "expected_chp": ["ËÇ∫ÁÇéÁêÉËèåÊÑüÊüì", "ËÇ∫ÁÇéÊîØÂéüÈ´îÊÑüÊüì", "2019ÂÜ†ÁãÄÁóÖÊØíÁóÖ"]
            },
            {
                "name": "Food Poisoning - Adult",
                "symptoms": ["ËÖπÁóõ", "ËÖπÁÄâ", "ÂòîÂêê"],
                "age": "45",
                "gender": "female",
                "location": "Tsuen Wan",
                "expected_chp": ["È£üÁâ©‰∏≠ÊØí", "ËÖ∏ËÉÉÁÇé", "Èúç‰∫Ç"]
            },
            {
                "name": "Stomach Issues - Child",
                "symptoms": ["ËÉÉÁóõ", "ËÖπÁÄâ", "ÂôÅÂøÉ"],
                "age": "12",
                "gender": "male",
                "location": "Kwun Tong",
                "expected_chp": ["ËÖ∏ËÉÉÁÇé", "È£üÁâ©‰∏≠ÊØí", "Ê∂àÂåñ‰∏çËâØ"]
            },
            {
                "name": "Diabetes Symptoms - Middle-aged",
                "symptoms": ["Âè£Ê∏¥", "Â§öÂ∞ø", "Áñ≤ÂÄ¶", "È´îÈáçÊ∏õËºï"],
                "age": "55",
                "gender": "male",
                "location": "Mong Kok",
                "expected_chp": ["Á≥ñÂ∞øÁóÖ", "Á≥ñÂ∞øÁóÖÂèäÂÖ∂‰ΩµÁôºÁóá"]
            },
            {
                "name": "Heart Disease - Senior",
                "symptoms": ["ËÉ∏Áóõ", "ÂëºÂê∏Âõ∞Èõ£", "Áñ≤ÂÄ¶"],
                "age": "68",
                "gender": "female",
                "location": "North District",
                "expected_chp": ["ÂøÉËáüÁóÖ", "ÂøÉË°ÄÁÆ°ÁñæÁóÖ"]
            },
            {
                "name": "Hypertension - Adult",
                "symptoms": ["È†≠Áóõ", "È†≠Êöà", "È´òË°ÄÂ£ì"],
                "age": "52",
                "gender": "male",
                "location": "Yau Tsim Mong",
                "expected_chp": ["ÂøÉËáüÁóÖ", "È´òË°ÄÂ£ì", "ÂøÉË°ÄÁÆ°ÁñæÁóÖ"]
            },
            {
                "name": "Chickenpox - Child",
                "symptoms": ["ÁôºÁáí", "ÁöÆÁñπ", "Ê∞¥Ê≥°"],
                "age": "8",
                "gender": "female",
                "location": "Kwai Tsing",
                "expected_chp": ["Ê∞¥Áóò"]
            },
            {
                "name": "Hand Foot Mouth - Child",
                "symptoms": ["ÁôºÁáí", "Âè£ËÖîÊΩ∞Áòç", "ÊâãË∂≥ÁöÆÁñπ"],
                "age": "5",
                "gender": "male",
                "location": "Tuen Mun",
                "expected_chp": ["ÊâãË∂≥Âè£ÁóÖ"]
            },
            {
                "name": "Mental Health - Adult",
                "symptoms": ["ÊäëÈ¨±", "ÁÑ¶ÊÖÆ", "Â£ìÂäõÂ§ß"],
                "age": "42",
                "gender": "female",
                "location": "Eastern",
                "expected_chp": ["ÂøÉÁêÜÂÅ•Â∫∑", "ÊäëÈ¨±Áóá", "ÁÑ¶ÊÖÆÁóá", "Â£ìÂäõÁÆ°ÁêÜ"]
            },
            {
                "name": "Complex Case - Adult",
                "symptoms": ["ÁôºÁáí", "Âí≥ÂóΩ", "ËÉ∏Áóõ", "Áñ≤ÂÄ¶"],
                "age": "38",
                "gender": "male",
                "location": "Islands",
                "expected_chp": ["ËÇ∫ÁÇéÁêÉËèåÊÑüÊüì", "2019ÂÜ†ÁãÄÁóÖÊØíÁóÖ", "ÂøÉËáüÁóÖ"]
            },

            # Additional diverse test cases (24 more = 36 total)
            {
                "name": "Pregnancy Symptoms - Young Female",
                "symptoms": ["ÂôÅÂøÉ", "ÂòîÂêê", "Áñ≤ÂÄ¶", "ÂÅúÁ∂ì"],
                "age": "26",
                "gender": "female",
                "location": "Central and Western",
                "expected_chp": ["Êá∑Â≠ïËàáÊ∫ñÂÇôÊá∑Â≠ï"]
            },
            {
                "name": "Menopause - Middle-aged Female",
                "symptoms": ["ÊΩÆÁÜ±", "Â§±Áú†", "ÊÉÖÁ∑íÊ≥¢Âãï"],
                "age": "48",
                "gender": "female",
                "location": "Wan Chai",
                "expected_chp": ["Êõ¥Âπ¥Êúü"]
            },
            {
                "name": "Prostate Issues - Senior Male",
                "symptoms": ["Â∞øÈ†ª", "Â∞øÊÄ•", "Â§úÂ∞ø"],
                "age": "65",
                "gender": "male",
                "location": "Sha Tin",
                "expected_chp": ["ÊîùË≠∑ËÖ∫Áôå"]
            },
            {
                "name": "Thyroid Problems - Adult Female",
                "symptoms": ["Áñ≤ÂÄ¶", "È´îÈáçÂ¢ûÂä†", "ÊÄïÂÜ∑"],
                "age": "34",
                "gender": "female",
                "location": "Tsuen Wan",
                "expected_chp": ["Áî≤ÁãÄËÖ∫ÂäüËÉΩÊ∏õÈÄÄ"]
            },
            {
                "name": "Asthma Attack - Child",
                "symptoms": ["ÂëºÂê∏Âõ∞Èõ£", "ÂñòÈ≥¥", "ËÉ∏ÊÇ∂"],
                "age": "10",
                "gender": "male",
                "location": "Kwun Tong",
                "expected_chp": ["ÂìÆÂñò"]
            },
            {
                "name": "Migraine - Adult Female",
                "symptoms": ["ÂäáÁÉàÈ†≠Áóõ", "ÂôÅÂøÉ", "ÁïèÂÖâ"],
                "age": "31",
                "gender": "female",
                "location": "Mong Kok",
                "expected_chp": ["ÂÅèÈ†≠Áóõ"]
            },
            {
                "name": "Kidney Stones - Adult Male",
                "symptoms": ["ÂäáÁÉàËÖ∞Áóõ", "Ë°ÄÂ∞ø", "ÂôÅÂøÉ"],
                "age": "41",
                "gender": "male",
                "location": "North District",
                "expected_chp": ["ËÖéÁµêÁü≥"]
            },
            {
                "name": "Hepatitis - Adult Male",
                "symptoms": ["Áñ≤ÂÄ¶", "ÈªÉÁñ∏", "È£üÊÖæ‰∏çÊåØ"],
                "age": "37",
                "gender": "male",
                "location": "Yau Tsim Mong",
                "expected_chp": ["ÁóÖÊØíÊÄßËÇùÁÇé"]
            },
            {
                "name": "Breast Cancer Screening - Adult Female",
                "symptoms": ["‰π≥ÊàøËÖ´Â°ä", "‰π≥È†≠ÂàÜÊ≥å"],
                "age": "44",
                "gender": "female",
                "location": "Kwai Tsing",
                "expected_chp": ["‰π≥Áôå"]
            },
            {
                "name": "Tuberculosis - Adult Male",
                "symptoms": ["ÊåÅÁ∫åÂí≥ÂóΩ", "Âí≥Ë°Ä", "È´îÈáçÊ∏õËºï"],
                "age": "33",
                "gender": "male",
                "location": "Tuen Mun",
                "expected_chp": ["ËÇ∫ÁµêÊ†∏"]
            },
            {
                "name": "Osteoporosis - Elderly Female",
                "symptoms": ["È™®Áóõ", "Ë∫´È´òÊ∏õ‰Ωé", "ÂÆπÊòìÈ™®Êäò"],
                "age": "78",
                "gender": "female",
                "location": "Eastern",
                "expected_chp": ["È™®Ë≥™ÁñèÈ¨Ü"]
            },
            {
                "name": "HIV Symptoms - Adult Male",
                "symptoms": ["Áñ≤ÂÄ¶", "Ê∑ãÂ∑¥ÁµêËÖ´Â§ß", "ÁôºÁáí"],
                "age": "29",
                "gender": "male",
                "location": "Islands",
                "expected_chp": ["‰∫∫È°ûÂÖçÁñ´Áº∫‰πèÁóÖÊØíÊÑüÊüì"]
            },
            {
                "name": "Epilepsy - Young Adult",
                "symptoms": ["Á™ÅÁÑ∂ÊäΩÊêê", "ÊÑèË≠òÂñ™Â§±", "ËÇåËÇâÂÉµÁ°¨"],
                "age": "22",
                "gender": "female",
                "location": "Central and Western",
                "expected_chp": ["Áô≤Áôá"]
            },
            {
                "name": "Alzheimer's - Elderly Female",
                "symptoms": ["Ë®òÊÜ∂ÂäõÊ∏õÈÄÄ", "Ê∑∑‰∫Ç", "ÊÄßÊ†ºÊîπËÆä"],
                "age": "82",
                "gender": "female",
                "location": "Wan Chai",
                "expected_chp": ["Ë™çÁü•ÈöúÁ§ôÁóá"]
            },
            {
                "name": "Conjunctivitis - Child",
                "symptoms": ["ÁúºÁ¥Ö", "ÁúºÂ±éÂ§ö", "ÁïèÂÖâ"],
                "age": "7",
                "gender": "male",
                "location": "Sha Tin",
                "expected_chp": ["ÂÇ≥ÊüìÊÄßÊÄ•ÊÄßÁµêËÜúÁÇé"]
            },
            {
                "name": "Obesity - Adult Male",
                "symptoms": ["È´îÈáçÈÅéÈáç", "ÂëºÂê∏Âõ∞Èõ£", "ÈóúÁØÄÁóõ"],
                "age": "39",
                "gender": "male",
                "location": "Tsuen Wan",
                "expected_chp": ["ËÇ•ËÉñ"]
            },
            {
                "name": "Smoking Cessation - Adult Female",
                "symptoms": ["Âí≥ÂóΩ", "ÂëºÂê∏Âõ∞Èõ£", "ÊàíÁÖôÊÑèÈ°ò"],
                "age": "36",
                "gender": "female",
                "location": "Kwun Tong",
                "expected_chp": ["ÊàíÁÖô"]
            },
            {
                "name": "Alcohol Addiction - Adult Male",
                "symptoms": ["È£≤ÈÖí‰æùË≥¥", "ËÇùÂäüËÉΩÁï∞Â∏∏", "ÊÉÖÁ∑íÊ≥¢Âãï"],
                "age": "43",
                "gender": "male",
                "location": "Mong Kok",
                "expected_chp": ["ÈÖóÈÖí"]
            },
            {
                "name": "Malnutrition - Elderly Female",
                "symptoms": ["È´îÈáçÊ∏õËºï", "Áñ≤ÂÄ¶", "ÁáüÈ§ä‰∏çËâØ"],
                "age": "75",
                "gender": "female",
                "location": "North District",
                "expected_chp": ["ÁáüÈ§ä‰∏çËâØ"]
            },
            {
                "name": "Parkinson's - Elderly Male",
                "symptoms": ["ËÇ¢È´îÈ°´Êäñ", "Âãï‰ΩúÁ∑©ÊÖ¢", "Âπ≥Ë°°Âõ∞Èõ£"],
                "age": "71",
                "gender": "male",
                "location": "Yau Tsim Mong",
                "expected_chp": ["Â∏ïÈáëÊ£ÆÁóÖ"]
            },
            {
                "name": "Dysmenorrhea - Young Female",
                "symptoms": ["Á∂ìÁóõ", "ËÖπÁóõ", "ÂôÅÂøÉ"],
                "age": "19",
                "gender": "female",
                "location": "Kwai Tsing",
                "expected_chp": ["Á∂ìÁóõ"]
            },
            {
                "name": "Influenza Vaccination - Senior",
                "symptoms": ["È†êÈò≤Êé•Á®Æ", "ÊµÅÊÑüÁñ´Ëãó"],
                "age": "67",
                "gender": "female",
                "location": "Tuen Mun",
                "expected_chp": ["Áñ´Ëãó", "È†êÈò≤Êé•Á®Æ"]
            },
            {
                "name": "Colorectal Cancer - Middle-aged",
                "symptoms": ["Â§ß‰æøÁøíÊÖ£ÊîπËÆä", "Ë°Ä‰æø", "ËÖπÁóõ"],
                "age": "58",
                "gender": "male",
                "location": "Eastern",
                "expected_chp": ["Â§ßËÖ∏Áôå"]
            },
            {
                "name": "Schizophrenia - Adult Male",
                "symptoms": ["ÂπªË¶∫", "Â¶ÑÊÉ≥", "Á§æÊúÉÈÄÄÁ∏Æ"],
                "age": "27",
                "gender": "male",
                "location": "Islands",
                "expected_chp": ["Á≤æÁ•ûÂÅ•Â∫∑"]
            },
            {
                "name": "Endometriosis - Adult Female",
                "symptoms": ["Á∂ìÁóõÂä†Âäá", "‰∏çÂ≠ï", "ÁõÜËÖîÁóõ"],
                "age": "32",
                "gender": "female",
                "location": "Central and Western",
                "expected_chp": ["Â≠êÂÆÆÂÖßËÜúÁï∞‰ΩçÁóá"]
            },
            {
                "name": "Acute Pancreatitis - Adult Male",
                "symptoms": ["ÂäáÁÉàËÖπÁóõ", "ÂôÅÂøÉ", "ÂòîÂêê"],
                "age": "46",
                "gender": "male",
                "location": "Wan Chai",
                "expected_chp": ["ÊÄ•ÊÄßËÉ∞ËáüÁÇé"]
            },
            {
                "name": "Occupational Health - Adult Female",
                "symptoms": ["Â∑•‰ΩúÂ£ìÂäõ", "ËÅ∑Ê•≠ÂÇ∑ÂÆ≥", "ÂÅ•Â∫∑Ê™¢Êü•"],
                "age": "35",
                "gender": "female",
                "location": "Sha Tin",
                "expected_chp": ["ËÅ∑Ê•≠ÂÆâÂÖ®", "Áí∞Â¢ÉÂÅ•Â∫∑ËàáÊêçÂÇ∑È†êÈò≤"]
            },
            {
                "name": "Pediatric Vaccination - Child",
                "symptoms": ["Áñ´ËãóÊé•Á®Æ", "ÂÖíÁ´•È†êÈò≤"],
                "age": "2",
                "gender": "male",
                "location": "Tsuen Wan",
                "expected_chp": ["Áñ´Ëãó", "È†êÈò≤Êé•Á®Æ"]
            },
            {
                "name": "Chronic Kidney Disease - Senior",
                "symptoms": ["Áñ≤ÂÄ¶", "Ê∞¥ËÖ´", "È´òË°ÄÂ£ì"],
                "age": "73",
                "gender": "female",
                "location": "Kwun Tong",
                "expected_chp": ["ÊÖ¢ÊÄßËÖéÁóÖ"]
            },
            {
                "name": "Lung Cancer - Senior Male",
                "symptoms": ["ÊåÅÁ∫åÂí≥ÂóΩ", "È´îÈáçÊ∏õËºï", "ÂëºÂê∏Âõ∞Èõ£"],
                "age": "69",
                "gender": "male",
                "location": "Mong Kok",
                "expected_chp": ["ËÇ∫Áôå"]
            },
            {
                "name": "Testicular Cancer - Young Male",
                "symptoms": ["Áù™‰∏∏ËÖ´Â§ß", "ÁñºÁóõ", "ËÖ´Â°ä"],
                "age": "24",
                "gender": "male",
                "location": "North District",
                "expected_chp": ["Áù™‰∏∏Áôå"]
            },
            {
                "name": "Ovarian Cancer - Middle-aged Female",
                "symptoms": ["ËÖπËÑπ", "ËÖπÁóõ", "È´îÈáçÊ∏õËºï"],
                "age": "51",
                "gender": "female",
                "location": "Yau Tsim Mong",
                "expected_chp": ["ÂçµÂ∑¢Áôå"]
            },
            {
                "name": "Cervical Cancer - Adult Female",
                "symptoms": ["‰∏çÊ≠£Â∏∏Èô∞ÈÅìÂá∫Ë°Ä", "È™®ÁõÜÁóõ"],
                "age": "40",
                "gender": "female",
                "location": "Kwai Tsing",
                "expected_chp": ["Â≠êÂÆÆÈ†∏Áôå"]
            },
            {
                "name": "Gonorrhea - Young Adult",
                "symptoms": ["Áï∞Â∏∏ÂàÜÊ≥åÁâ©", "Â∞øÈÅìÁóõ", "Èô∞ÈÉ®ÊêîÁô¢"],
                "age": "25",
                "gender": "male",
                "location": "Tuen Mun",
                "expected_chp": ["Ê∑ãÁóÖ"]
            },
            {
                "name": "Chlamydia - Young Female",
                "symptoms": ["Áï∞Â∏∏ÂàÜÊ≥åÁâ©", "Èô∞ÈÉ®Áóõ", "ÁÑ°ÁóáÁãÄÊÑüÊüì"],
                "age": "23",
                "gender": "female",
                "location": "Eastern",
                "expected_chp": ["Ë°£ÂéüÈ´îÊÑüÊüì"]
            },
            {
                "name": "Syphilis - Adult Male",
                "symptoms": ["ÁîüÊÆñÂô®ÊΩ∞Áòç", "ÁöÆÁñπ", "Ê∑ãÂ∑¥ÁµêËÖ´Â§ß"],
                "age": "30",
                "gender": "male",
                "location": "Islands",
                "expected_chp": ["Ê¢ÖÊØí"]
            }
        ]

        all_results = []

        for i, test_case in enumerate(test_cases, 1):
            print(f"\nüìä Test {i}/{len(test_cases)}")

            if self.mock_mode:
                result = self.test_ai_analysis_mock(
                    symptoms=test_case["symptoms"],
                    expected_chp_topics=test_case["expected_chp"],
                    test_name=test_case["name"],
                    age=test_case["age"],
                    gender=test_case["gender"]
                )
            else:
                result = self.test_ai_analysis(
                    symptoms=test_case["symptoms"],
                    expected_chp_topics=test_case["expected_chp"],
                    test_name=test_case["name"]
                )

            all_results.append(result)

            # Simple progress indicator (removed detailed output to avoid duplication)
            status_emoji = "‚úÖ" if result["status"] == "PASSED" else "‚ùå"
            print(f"   {status_emoji} {test_case['name']}")

            if result["status"] == "FAILED":
                print(f"   ‚ùå Error: {result.get('error', 'Unknown')}")

        return all_results

    def generate_report(self, results):
        """Generate comprehensive test report"""
        print("\n" + "="*80)
        print("üìä COMPREHENSIVE AI ANALYSIS TEST REPORT")
        print("="*80)

        # Summary statistics
        total_tests = len(results)
        passed_tests = sum(1 for r in results if r["status"] == "PASSED")
        failed_tests = total_tests - passed_tests

        print("\nüéØ OVERALL RESULTS:")
        print(f"   Total Tests: {total_tests}")
        print(f"   ‚úÖ Passed: {passed_tests}")
        print(f"   ‚ùå Failed: {failed_tests}")
        print(f"   Success Rate: {(passed_tests/total_tests*100):.1f}%")

        # CHP Relevance Analysis
        chp_scores = [r.get("chp_relevance", {}).get("score", 0) for r in results if r["status"] == "PASSED"]
        avg_chp = 0.0
        if chp_scores:
            avg_chp = sum(chp_scores) / len(chp_scores)
            print("\nüè• CHP GUIDELINES ANALYSIS:")
            print(f"   Average Score: {avg_chp:.1f}/100")
            print(f"   Highest: {max(chp_scores)}/100")
            print(f"   Lowest: {min(chp_scores)}/100")

        # PubMed Relevance Analysis (removed - now handled by evidence relevance)
        # pubmed_scores = [r.get("pubmed_relevance", {}).get("score", 0) for r in results if r["status"] == "PASSED"]
        # avg_pubmed = 0.0
        # if pubmed_scores:
        #     avg_pubmed = sum(pubmed_scores) / len(pubmed_scores)
        #     print("\nüìö PUBMED REFERENCES ANALYSIS:")
        #     print(f"   Average Score: {avg_pubmed:.1f}/100")
        #     print(f"   Highest: {max(pubmed_scores)}/100")
        #     print(f"   Lowest: {min(pubmed_scores)}/100")

        # Medical Evidence Gathering Analysis
        evidence_results = [r.get("evidence_relevance", {}) for r in results if r["status"] == "PASSED"]
        successful_evidence = [e for e in evidence_results if e.get("score", 0) > 0]
        total_articles = sum(e.get("evidence_count", 0) for e in successful_evidence)
        avg_evidence_count = total_articles / len(successful_evidence) if successful_evidence else 0

        print("\nüî¨ MEDICAL EVIDENCE ANALYSIS:")
        print(f"   Successful Evidence Gathering: {len(successful_evidence)}/{len(evidence_results)} tests")
        print(f"   Average Articles per Test: {avg_evidence_count:.1f}")
        print(f"   Total Articles Gathered: {total_articles}")
        print(f"   Evidence Integration Rate: {(len(successful_evidence)/len(evidence_results)*100):.1f}%")

        # Detailed results
        print("\nüìã DETAILED TEST RESULTS:")
        print("-" * 80)

        for i, result in enumerate(results, 1):
            status = result["status"]
            status_emoji = "‚úÖ" if status == "PASSED" else "‚ùå"

            print(f"\n{i}. {status_emoji} {result['test_name']}")

            if status == "PASSED":
                patient_data = result.get("patient_data", {})
                chp = result.get("chp_relevance", {})
                pubmed = result.get("pubmed_relevance", {})
                evidence = result.get("medical_evidence", {})

                print(f"   Patient: {patient_data.get('age', 'N/A')}Ê≠≤ {patient_data.get('gender', 'N/A')}ÊÄß")
                symptoms = result.get('symptoms', [])
                print(f"   Symptoms: {', '.join(symptoms) if symptoms else 'No symptoms'}")
                print(f"   üìÑ AI Analysis: {result.get('analysis_preview', 'No analysis available')}")
                extracted = result.get('extracted_symptoms', [])
                print(f"   Extracted: {', '.join(extracted) if extracted else 'No extracted symptoms'}")
                print(f"   CHP Score: {chp.get('score', 0)}/100")
                # Removed PubMed score display

                # Show evidence relevance
                evidence_rel = result.get("evidence_relevance", {})
                if evidence_rel.get("score", 0) > 0:
                    print(f"   Evidence Score: {evidence_rel.get('score', 0)}/100 ({evidence_rel.get('assessment', '')})")
                    print(f"   Evidence Count: {evidence_rel.get('evidence_count', 0)} articles")

                    # Show what CHP content was actually fetched
                    evidence_data = result.get("medical_evidence", {})
                    if evidence_data.get("has_chp", False):
                        titles = evidence_data.get("evidence_titles", [])
                        chp_titles = [t for t in titles if 'chp' in t.lower() or 'Ë°ûÁîü' in t or 'Ë°õÁîü' in t]
                        if chp_titles:
                            print(f"   üè• CHP Content: {', '.join(chp_titles[:2])}")

                if chp.get("matched_topics"):
                    print(f"   CHP Topics: {', '.join(chp['matched_topics'][:2])}")

                # Show medical evidence gathering results
                if evidence.get("success", False):
                    evidence_count = evidence.get("evidence_count", 0)
                    print(f"   üìö Evidence Count: {evidence_count} articles")

                    titles = evidence.get("evidence_titles", [])
                    if titles:
                        print(f"   üìñ Titles: {', '.join(titles[:2])}")
                else:
                    print(f"   ‚ùå Evidence Error: {evidence.get('error', 'API not available')}")

            else:
                print(f"   Error: {result.get('error', 'Unknown')}")

        # Recommendations
        print("\nüí° RECOMMENDATIONS:")
        print("-" * 80)

        if avg_chp < 70:
            print("‚ö†Ô∏è  CHP mapping needs improvement - consider expanding symptom coverage")

        # Removed PubMed recommendations - now handled by evidence relevance

        if failed_tests > 0:
            print(f"‚ö†Ô∏è  {failed_tests} tests failed - check AI analysis endpoint")

        print("\n‚úÖ Testing completed!")
        print(f"Report generated at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

        return {
            "summary": {
                "total_tests": total_tests,
                "passed_tests": passed_tests,
                "failed_tests": failed_tests,
                "avg_chp_score": round(sum(chp_scores) / len(chp_scores), 1) if chp_scores else 0,
                # "avg_pubmed_score": round(sum(pubmed_scores) / len(pubmed_scores), 1) if pubmed_scores else 0  # Removed
            },
            "detailed_results": results
        }


def main(mock_mode=None):
    """Main test runner"""
    # Auto-detect mock mode if not specified
    if mock_mode is None:
        # Try to detect if server is running
        try:
            import requests
            response = requests.get('http://localhost:7001/', timeout=2)
            if response.status_code == 200:
                mock_mode = False  # Server is running, use real mode
                print("üîó Server detected - running in REAL MODE")
            else:
                mock_mode = True   # Server not responding, use mock mode
                print("üîå Server not detected - running in MOCK MODE")
        except:
            mock_mode = True   # Server not accessible, use mock mode
            print("üîå Server not accessible - running in MOCK MODE")

    tester = AIAnalysisTester(mock_mode=mock_mode)

    # Run comprehensive tests
    results = tester.run_comprehensive_tests()

    # Generate report
    report = tester.generate_report(results)

    # Save results to file
    with open('ai_analysis_test_results.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)

    print("\nüíæ Results saved to ai_analysis_test_results.json")
    mode_text = "MOCK MODE (server not required)" if mock_mode else "REAL MODE (server required)"
    print(f"üìù Note: Tests ran in {mode_text}")
    return report


if __name__ == "__main__":
    import sys

    # Check command line arguments
    mock_mode = None
    if len(sys.argv) > 1:
        if sys.argv[1].lower() == 'mock':
            mock_mode = True
            print("üé≠ Forced MOCK MODE by command line argument")
        elif sys.argv[1].lower() == 'real':
            mock_mode = False
            print("üîó Forced REAL MODE by command line argument")

    main(mock_mode)
